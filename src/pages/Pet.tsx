import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { User } from "@supabase/supabase-js";
import Header from "@/components/layout/Header";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Apple, Droplet, Smile, AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface Pet {
  id: string;
  name: string;
  type: "cow" | "chicken" | "sheep";
  hunger: number;
  thirst: number;
  happiness: number;
  created_at: string;
  last_fed_at: string;
  last_watered_at: string;
  last_played_at: string;
  ran_away_at: string | null;
}

const Pet = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [pet, setPet] = useState<Pet | null>(null);
  const [petName, setPetName] = useState("");
  const [selectedType, setSelectedType] = useState<"cow" | "chicken" | "sheep" | null>(null);

  const petTypes = [
    { type: "cow" as const, emoji: "üêÑ", name: "–ö–æ—Ä–æ–≤–∞" },
    { type: "chicken" as const, emoji: "üêî", name: "–ö—É—Ä–∏—Ü–∞" },
    { type: "sheep" as const, emoji: "üêë", name: "–û–≤—Ü–∞" },
  ];

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (!session) {
        navigate("/auth");
        return;
      }
      setUser(session.user);
      loadPet(session.user.id);
    });

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user ?? null);
      if (!session) {
        navigate("/auth");
      } else {
        loadPet(session.user.id);
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [navigate]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞
  useEffect(() => {
    if (!pet || pet.ran_away_at) return;

    const interval = setInterval(() => {
      updatePetStats(pet);
    }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [pet]);

  const loadPet = async (userId: string) => {
    setLoading(true);
    const { data, error } = await supabase
      .from("pets")
      .select("*")
      .eq("user_id", userId)
      .maybeSingle();

    if (error) {
      console.error("Error loading pet:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞",
        variant: "destructive",
      });
    } else if (data) {
      setPet(data as Pet);
      updatePetStats(data as Pet);
    }
    setLoading(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ (8:00-20:00) –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
  const countActiveHours = (startDate: Date, endDate: Date): number => {
    let activeHours = 0;
    const current = new Date(startDate);
    
    while (current < endDate) {
      const hour = current.getHours();
      // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã —Å 8 –¥–æ 20
      if (hour >= 8 && hour < 20) {
        const nextHour = new Date(current);
        nextHour.setHours(current.getHours() + 1, 0, 0, 0);
        
        if (nextHour > endDate) {
          // –ß–∞—Å—Ç–∏—á–Ω—ã–π —á–∞—Å
          activeHours += (endDate.getTime() - current.getTime()) / (1000 * 60 * 60);
        } else {
          activeHours += 1;
        }
      }
      
      current.setHours(current.getHours() + 1, 0, 0, 0);
    }
    
    return Math.floor(activeHours);
  };

  const updatePetStats = async (petData: Pet) => {
    const now = new Date();
    const lastFed = new Date(petData.last_fed_at);
    const lastWatered = new Date(petData.last_watered_at);
    const lastPlayed = new Date(petData.last_played_at);

    // –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã (8:00-20:00)
    const activeHoursSinceFed = countActiveHours(lastFed, now);
    const activeHoursSinceWatered = countActiveHours(lastWatered, now);
    const activeHoursSincePlayed = countActiveHours(lastPlayed, now);

    const newHunger = Math.max(0, petData.hunger - activeHoursSinceFed);
    const newThirst = Math.max(0, petData.thirst - activeHoursSinceWatered);
    const newHappiness = Math.max(0, petData.happiness - activeHoursSincePlayed);

    if (newHunger !== petData.hunger || newThirst !== petData.thirst || newHappiness !== petData.happiness) {
      await updatePetInDb({ hunger: newHunger, thirst: newThirst, happiness: newHappiness });
    }
  };

  const updatePetInDb = async (updates: Partial<Pet>) => {
    if (!user || !pet) return;

    const { data, error } = await supabase
      .from("pets")
      .update(updates)
      .eq("id", pet.id)
      .select()
      .single();

    if (error) {
      console.error("Error updating pet:", error);
    } else if (data) {
      setPet(data as Pet);
    }
  };

  const createPet = async () => {
    if (!user || !petName.trim() || !selectedType) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
        variant: "destructive",
      });
      return;
    }

    const { data, error } = await supabase
      .from("pets")
      .insert({
        user_id: user.id,
        name: petName.trim(),
        type: selectedType,
        hunger: 100,
        thirst: 100,
        happiness: 100,
      })
      .select()
      .single();

    if (error) {
      console.error("Error creating pet:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞. –£ –≤–∞—Å —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∏—Ç–æ–º–µ—Ü.",
        variant: "destructive",
      });
    } else {
      setPet(data as Pet);
      setPetName("");
      setSelectedType(null);
      toast({
        title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
        description: `–í—ã –∑–∞–≤–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ ${petName}!`,
      });
    }
  };

  const handleAction = async (action: "feed" | "water" | "play") => {
    if (!user || !pet || pet.ran_away_at) return;

    const updates: Partial<Pet> = {};
    
    switch (action) {
      case "feed":
        updates.hunger = Math.min(100, pet.hunger + 20);
        updates.last_fed_at = new Date().toISOString();
        break;
      case "water":
        updates.thirst = Math.min(100, pet.thirst + 20);
        updates.last_watered_at = new Date().toISOString();
        break;
      case "play":
        updates.happiness = Math.min(100, pet.happiness + 20);
        updates.last_played_at = new Date().toISOString();
        break;
    }

    await updatePetInDb(updates);

    toast({
      title: "–ì–æ—Ç–æ–≤–æ!",
      description: `–í—ã ${action === "feed" ? "–ø–æ–∫–æ—Ä–º–∏–ª–∏" : action === "water" ? "–Ω–∞–ø–æ–∏–ª–∏" : "–ø–æ–∏–≥—Ä–∞–ª–∏ —Å"} –ø–∏—Ç–æ–º—Ü–∞`,
    });
  };

  const resetPet = async () => {
    if (!user || !pet) return;

    const { error } = await supabase
      .from("pets")
      .delete()
      .eq("id", pet.id);

    if (error) {
      console.error("Error deleting pet:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞",
        variant: "destructive",
      });
    } else {
      setPet(null);
      toast({
        title: "–ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω",
        description: "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞",
      });
    }
  };

  const getHealthStatus = () => {
    if (!pet || pet.ran_away_at) return { text: "–°–±–µ–∂–∞–ª", color: "bg-gray-500" };
    const avgStat = (pet.hunger + pet.thirst + pet.happiness) / 3;
    if (avgStat >= 70) return { text: "–û—Ç–ª–∏—á–Ω–æ", color: "bg-green-500" };
    if (avgStat >= 40) return { text: "–ù–æ—Ä–º–∞–ª—å–Ω–æ", color: "bg-yellow-500" };
    return { text: "–ü–ª–æ—Ö–æ", color: "bg-red-500" };
  };

  const getDaysSinceCreation = () => {
    if (!pet) return 0;
    const now = new Date();
    const created = new Date(pet.created_at);
    return Math.floor((now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));
  };

  if (loading) {
    return <div className="min-h-screen flex items-center justify-center">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <main className="container py-8">
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold mb-2">
                –ú–æ–π <span className="gradient-text">–¢–∞–º–∞–≥–æ—á–∏</span>
              </h1>
              <p className="text-muted-foreground">
                –ó–∞–±–æ—Ç—å—Å—è –æ —Å–≤–æ—ë–º –ø–∏—Ç–æ–º—Ü–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
              </p>
            </div>
          </div>

          {!pet || pet.ran_away_at ? (
            <Card>
              <CardHeader>
                <CardTitle>
                  {pet?.ran_away_at ? "–ü–∏—Ç–æ–º–µ—Ü —Å–±–µ–∂–∞–ª üò¢" : "–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞"}
                </CardTitle>
                <CardDescription>
                  {pet?.ran_away_at
                    ? "–í—ã –Ω–µ –∑–∞–±–æ—Ç–∏–ª–∏—Å—å –æ –ø–∏—Ç–æ–º—Ü–µ –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å, –∏ –æ–Ω —Å–±–µ–∂–∞–ª. –ó–∞–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ!"
                    : "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä—ë—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –¥–∞–π –µ–º—É –∏–º—è"}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="petName">–ò–º—è –ø–∏—Ç–æ–º—Ü–∞</Label>
                    <Input
                      id="petName"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è..."
                      value={petName}
                      onChange={(e) => setPetName(e.target.value)}
                      maxLength={20}
                    />
                  </div>
                  
                  <div>
                    <Label>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</Label>
                    <div className="grid grid-cols-3 gap-4 mt-2">
                      {petTypes.map((petType) => (
                        <Card 
                          key={petType.type}
                          className={`cursor-pointer hover:bg-accent transition-colors text-center p-6 ${
                            selectedType === petType.type ? 'ring-2 ring-primary' : ''
                          }`}
                          onClick={() => setSelectedType(petType.type)}
                        >
                          <span className="text-4xl block mb-2">{petType.emoji}</span>
                          <p className="text-sm font-medium">{petType.name}</p>
                        </Card>
                      ))}
                    </div>
                  </div>

                  <Button onClick={createPet} className="w-full" disabled={!petName.trim() || !selectedType}>
                    –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞
                  </Button>
                  
                  {pet?.ran_away_at && (
                    <Button onClick={resetPet} variant="outline" className="w-full">
                      –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          ) : (
            <>
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="flex items-center gap-2">
                        {pet.name}
                        <span className="text-4xl">
                          {petTypes.find((p) => p.type === pet.type)?.emoji}
                        </span>
                      </CardTitle>
                      <CardDescription>
                        {petTypes.find((p) => p.type === pet.type)?.name} ‚Ä¢ –ñ–∏–≤—ë—Ç {getDaysSinceCreation()} –¥–Ω–µ–π
                      </CardDescription>
                    </div>
                    <Badge className={getHealthStatus().color}>
                      {getHealthStatus().text}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid gap-4">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Apple className="h-4 w-4" />
                          <span className="text-sm font-medium">–ì–æ–ª–æ–¥</span>
                        </div>
                        <span className="text-sm text-muted-foreground">
                          {pet.hunger}%
                        </span>
                      </div>
                      <Progress value={pet.hunger} />
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Droplet className="h-4 w-4" />
                          <span className="text-sm font-medium">–ñ–∞–∂–¥–∞</span>
                        </div>
                        <span className="text-sm text-muted-foreground">
                          {pet.thirst}%
                        </span>
                      </div>
                      <Progress value={pet.thirst} />
                    </div>

                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Smile className="h-4 w-4" />
                          <span className="text-sm font-medium">–°—á–∞—Å—Ç—å–µ</span>
                        </div>
                        <span className="text-sm text-muted-foreground">
                          {pet.happiness}%
                        </span>
                      </div>
                      <Progress value={pet.happiness} />
                    </div>
                  </div>

                  {(pet.hunger < 30 || pet.thirst < 30 || pet.happiness < 30) && (
                    <div className="flex items-center gap-2 p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
                      <AlertTriangle className="h-4 w-4 text-yellow-500" />
                      <p className="text-sm text-yellow-500">
                        –ü–∏—Ç–æ–º–µ—Ü –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∑–∞–±–æ—Ç–µ! –ï—Å–ª–∏ –Ω–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –Ω—ë–º 2 –Ω–µ–¥–µ–ª–∏, –æ–Ω —Å–±–µ–∂–∏—Ç.
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>–î–µ–π—Å—Ç–≤–∏—è</CardTitle>
                  <CardDescription>
                    –ó–∞–±–æ—Ç—å—Å—è –æ –ø–∏—Ç–æ–º—Ü–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–±–µ–∂–∞–ª
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-3 gap-4">
                    <Button
                      onClick={() => handleAction("feed")}
                      variant="outline"
                      className="h-20"
                    >
                      <div className="flex flex-col items-center gap-2">
                        <Apple className="h-6 w-6" />
                        <span>–ü–æ–∫–æ—Ä–º–∏—Ç—å</span>
                      </div>
                    </Button>
                    <Button
                      onClick={() => handleAction("water")}
                      variant="outline"
                      className="h-20"
                    >
                      <div className="flex flex-col items-center gap-2">
                        <Droplet className="h-6 w-6" />
                        <span>–ù–∞–ø–æ–∏—Ç—å</span>
                      </div>
                    </Button>
                    <Button
                      onClick={() => handleAction("play")}
                      variant="outline"
                      className="h-20"
                    >
                      <div className="flex flex-col items-center gap-2">
                        <Smile className="h-6 w-6" />
                        <span>–ü–æ–∏–≥—Ä–∞—Ç—å</span>
                      </div>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </>
          )}
        </div>
      </main>
    </div>
  );
};

export default Pet;
